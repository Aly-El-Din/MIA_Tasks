/*
    File:Aly El Din Mohamed El Sayed_01011690283_Task1_4
    Author:Aly El Din Mohamed El Sayed
    Brief description:Another algorithm, Creating average filter recursive algorithm on the array which
                       simulates a noisy signal to output the optimal signal

*/

/*
    I have designed a recursive algorithm to compute the average because
    if we compute the average by the standard method, it will be
    computationally expensive like if we have 10^6 elements in our array.
    Hence, my intuition is if we have K elements, and we want to compute
    the average of (X bar) of the (K-1)-th element.
    X(k-1)=(X(1)+X(2)+...+X(k-1))/k-1
    so,
    -   K*X(k)=X(1)+X(2)+....+X(k-1)+X(k)
    -   K*X(k)=(k-1)*X(k-1)+X(k)   (รท(k-1))
    -   (k/k-1)*X(k)=X(k-1)+X(k)/k-1
    -   X(k)=(k-1/k)*X(k-1)+(1/k)*X(k)
                |               |
                previous       new data point
                estimate
        where (k-1)/k would be call as average filter

*/


#include <stdio.h>
#include <stdlib.h>

static float mpu6050[10] = {0.0, 11.68, 18.95, 23.56, 25.72, 25.38, 22.65, 18.01, 10.14, -0.26};
static float bno55[10] = {0.0,9.49, 16.36, 21.2, 23.16, 22.8, 19.5, 14.85, 6.79, -2.69};

static int sizeOFmpu6050=sizeof(mpu6050)/sizeof(mpu6050[0]);
static int sizeOFbno55=sizeof(bno55)/sizeof(bno55[0]);

/**/
float averageFiltering1(int k);
float averageFiltering2(int k);

float averageFiltering1(int k){
    if(k==sizeOFmpu6050-1){
        return mpu6050[k-1];
    }

    return ((double)(k-1)/k)*mpu6050[k-1]+((double)1/k)*averageFiltering1(k+1);
}
float averageFiltering2(int k){
    if(k==sizeOFbno55-1){
        return bno55[k-1];
    }

    return ((double)(k-1)/k)*bno55[k-1]+((double)1/k)*averageFiltering2(k+1);
}

int main(){

    float average1=averageFiltering1(1);
    float average2=averageFiltering2(1);
    float averageOfArrays=(float) (average1+average2)/2;
    printf("%f",averageOfArrays);
}

